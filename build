#!/usr/bin/env python3

import os
import subprocess
import sys

# Bootstrapping
# =============

# Make sure the KNinja repo is available.
#
subprocess.check_call(['git', 'submodule', 'update', '--init', '--recursive'])
extdir = 'ext'
sys.path.append(os.path.join(os.path.dirname(__file__), extdir))

from kninja import *

# Build
# =====

proj = KProject(extdir = extdir)

def build(alias):
    selector = 'k | objectk | ' + alias
    return proj.definition( alias         = alias
                          , main          = 'boogie.md'
                          , other         = ['syntax.md', 'nothing.md', 'procedures.md', 'helpers.md', 'runtime.md', 'quantification.md']
                          , backend       = 'haskell'
                          , flags         = '--syntax-module BOOGIE-PROGRAM-SYNTAX --emit-json --md-selector "%s" --gen-bison-parser' % selector
                          )

verification = build('verification')
operational  = build('operational')

# Tests
# =====
 
driver = proj.definition( alias         = 'driver'
                        , main          = 'driver/driver.md'
                        , other         = ['quantification.md']
                        , backend       = 'llvm'
                        , flags         = '--md-selector "k | metak" -ccopt -g -ccopt -O0 --gen-bison-parser --syntax-module KORE'
                        )

def kboogie_runner(definition, expected_extension):
    def runner(input):
        kboogie_rule = proj.rule( 'kboogie'
                                , description = 'kboogie $definition: $in'
                                , command = './driver/driver "$definition_dir" "$in" > "$out" 2>&1 || (cat $out; false)'
                                , ext = definition._alias
                                )
        implicit_deps = [definition.target, driver.target , proj.source('bin/kboogie'), *glob('driver/*')]
        kboogie_rule = kboogie_rule.implicit(implicit_deps)
        kboogie_rule = kboogie_rule.variable('definition_dir', definition._directory)
        kboogie_rule = kboogie_rule.variable('definition', definition._alias)
        kboogie_out = proj.source(input).then(kboogie_rule)

        kboogie_diff_rule = proj.rule( 'diff-kboogie'
                                     , description = 'diff-kboogie: $in'
                                     , command = 'bin/diff-kboogie $in $expected'
                                     , ext = 'diff'
                                     )
        kboogie_diff_rule = kboogie_diff_rule.variable('expected', input + '.' + expected_extension)
        ret = kboogie_out.then(kboogie_diff_rule)
        proj.alias(input + '.' + definition._alias, [ret])
        return ret

    return runner

# TODO: Merge upstream
def suite(name, runner, tests, failing = None):
    all_tests     = tests
    failing_tests = failing
    passing_tests = filter_out(all_tests, failing_tests)
    proj.suite(name,              passing_tests, runner)
    proj.suite(name + '-failing', failing_tests, runner, default = False)

# Run all test as verification tests
suite('test-verification'
     , runner = kboogie_runner(verification, expected_extension = 'expect')
     , tests   = glob('test/*/*/*.bpl')
     , failing = readlines('test/failing.verification')
     )

suite('test-operational'
     , runner = kboogie_runner(operational, expected_extension = 'opexpect')
     , tests   = glob('test/operational/*/*.bpl')
     , failing = readlines('test/failing.operational')
     )

# Main
# ====

proj.main()
