#!/usr/bin/env python3

import os
import subprocess
import sys

# Bootstrapping
# =============

# Make sure the KNinja repo is available.
#
subprocess.check_call(['git', 'submodule', 'update', '--init', '--recursive'])
extdir = 'ext'
sys.path.append(os.path.join(os.path.dirname(__file__), extdir))

from kninja import *

# Build
# =====

proj = KProject(extdir = extdir)
boogie = proj.definition( alias         = 'boogie'
                        , main          = 'boogie.md'
                        , other         = ['syntax.md', 'nothing.md', 'substitution.md', 'quantifiable-builtins.md']
                        , backend       = 'haskell'
                        , flags         = '--syntax-module BOOGIE-PROGRAM-SYNTAX --emit-json'
                        )

# Tests
# =====

def lit_runner(input):
    rule = proj.rule( 'lit'
                    , description = 'lit: $in'
                    , command = 'lit -v $in > $out 2>&1 || (cat $out; false)'
                    , ext = 'lit')
    implicit_deps = [ boogie.target
                    , proj.source('test/lit.site.cfg')
                    , proj.source('bin/diff-kboogie')
                    , proj.source('bin/kboogie')
                    ]
    ret = proj.source(input).then(rule.implicit(implicit_deps))
    proj.alias(input + '.lit', [ret])
    return ret

all_tests     = glob('test/**/*.bpl')
failing_tests = readlines('test/failing')
passing_tests = filter_out(all_tests, failing_tests)
proj.suite('test',         passing_tests, lit_runner)
proj.suite('test-failing', failing_tests, lit_runner, default = False)

# Main
# ====

proj.main()
